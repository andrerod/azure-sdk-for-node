/**
* Copyright (c) Microsoft.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// Test includes
var testutil = require('./util');
var nock = require('nock');
var nockHelper = require('./nock-helper');

// Lib includes
var azure = testutil.libRequire('azure');

exports = module.exports = StorageTestUtils;

function StorageTestUtils(service, testPrefix) {
  this.service = service;
  this.testPrefix = testPrefix;
  this.mockServerClient;
  this.currentTest = 0;
}

StorageTestUtils.prototype.normalizeService = function (service) {
  if (this.isMocked) {
    service.useProxy = true;
    service.proxyUrl = 'localhost';
    service.proxyPort = 8888;
  }
};

StorageTestUtils.prototype.setupSuite = function (callback) {
  if (process.env.AZURE_NOCK_RECORD) {
    fs.writeFileSync(__dirname + '/../recordings/' + this.testPrefix + '.nock.js', 
      '// This file has been autogenerated.\n\n' +
      'exports.scopes = [');
  }

  callback();
};

StorageTestUtils.prototype.teardownSuite = function (callback) {
  this.currentTest = 0;

  if (process.env.AZURE_MOBILE_NOCK_REC) {
    fs.appendFileSync(__dirname + '/../recordings/' + this.testPrefix + '.nock.js', '];');
  }

  callback();
};

StorageTestUtils.prototype.setupTest = function (callback) {
  nockHelper.nockHttp();

  if (process.env.AZURE_NOCK_RECORD) {
    // start nock recoding
    nockHelper.nock.recorder.rec(true);
  }

  callback();
};

StorageTestUtils.prototype.baseTeardownTest = function (callback) {
  if (process.env.AZURE_NOCK_RECORD) {
    // play nock recording
    var scope = scopeWritten ? ',\n[' : '[';
    scopeWritten = true;
    var lineWritten;
    nockhelper.nock.recorder.play().forEach(function (line) {
      if (line.indexOf('nock') >= 0) {
        // TODO: any recording filtering happens here

        scope += (lineWritten ? ',\n' : '') + 'function (nock) { var result = ' + line + ' return result; }';
        lineWritten = true;
      }
    });
    scope += ']';
    fs.appendFileSync(__dirname + '/../recordings/' + this.testPrefix + '.nock.js', scope);
    nockhelper.nock.recorder.clear();
  }

  nockHelper.unNockHttp();

  callback();
};